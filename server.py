import os
import re
import logging
import asyncio
import pprint
from flask import Flask, request, jsonify
import openai
import requests
from datetime import datetime
from clientdata import register_or_update_client, verify_client_code, update_last_visit, update_activity_status
from client_caec import add_message_to_client_file, find_client_file_id, get_sheets_service, CLIENT_FILES_DIR
from bible import load_bible_data, save_bible_pair
from price_handler import check_ferry_price, parse_price
from flask_cors import CORS
import openpyxl
import json

# –ò–º–ø–æ—Ä—Ç—ã Telegram Bot
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/etc/secrets/service_account_json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

app = Flask(__name__)
CORS(app)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("server.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)
logger.info("–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
pprint.pprint(dict(os.environ))

pending_guiding = {}

def send_telegram_notification(message):
    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    telegram_chat_id = os.getenv("TELEGRAM_CHAT_ID")
    if not telegram_bot_token or not telegram_chat_id:
        logger.error("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    url = f"https://api.telegram.org/bot{telegram_bot_token}/sendMessage"
    payload = {"chat_id": telegram_chat_id, "text": message, "parse_mode": "HTML"}
    try:
        resp = requests.post(url, json=payload)
        resp.raise_for_status()
        logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {resp.json()}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

PRICE_KEYWORDS = ["—Ü–µ–Ω–∞", "–ø—Ä–∞–π—Å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–≤–æ —Å–∫–æ–ª—å–∫–æ –æ–±–æ–π–¥–µ—Ç—Å—è"]

def is_price_query(text):
    return any(keyword in text.lower() for keyword in PRICE_KEYWORDS)

def get_vehicle_type(text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¢–° –≤ –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª ¬´–≥—Ä—É–∑–æ–≤–∏–∫¬ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "Truck".
    –ï—Å–ª–∏ ¬´—Ñ—É—Ä–∞¬ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "Fura".
    """
    text_lower = text.lower()
    if "–≥—Ä—É–∑–æ–≤–∏–∫" in text_lower:
        return "Truck"
    if "truck" in text_lower:
        return "Truck"
    if "—Ñ—É—Ä–∞" in text_lower:
        return "Fura"
    if "fura" in text_lower:
        return "Fura"
    return None

def get_price_response(vehicle_type, direction="Ro_Ge"):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç check_ferry_price –∏–∑ price_handler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¢–û–õ–¨–ö–û —Å —Å–∞–π—Ç–∞.
    """
    try:
        return check_ferry_price(vehicle_type, direction)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ get_price_response: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã."

def prepare_chat_context(client_code):
    messages = []
    bible_df = load_bible_data()
    if bible_df is None:
        raise Exception("Bible.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    logger.info(f"Bible.xlsx —Å–æ–¥–µ—Ä–∂–∏—Ç {len(bible_df)} –∑–∞–ø–∏—Å–µ–π.")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (FAQ='-' –∏ Verification='RULE')
    rules_df = bible_df[
        (bible_df["FAQ"].str.strip() == "-") &
        (bible_df["Verification"].str.upper() == "RULE")
    ]
    system_rule = "\n".join(rules_df["Answers"].tolist())
    
    strict_instructions = (
        "–í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –¥–æ–ª–∂–Ω—ã —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å. "
        "1. –í—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ Bible.xlsx –∏–º–µ—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. "
        "2. –ù–µ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ—Å—å –æ—Ç —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö. "
        "3. –ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —ç—Ç–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö. "
        "4. –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏–µ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º, –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ."
    )
    system_message = {
        "role": "system",
        "content": f"{strict_instructions}\n\n{system_rule}"
    }
    messages.append(system_message)
    
    spreadsheet_id = find_client_file_id(client_code)
    if spreadsheet_id:
        sheets_service = get_sheets_service()
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range="Sheet1!A:B"
        ).execute()
        values = result.get("values", [])
        if len(values) >= 2:
            conversation_rows = values[2:]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(conversation_rows)} —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è {client_code}.")
            for row in conversation_rows:
                if len(row) >= 1 and row[0].strip():
                    messages.append({"role": "user", "content": row[0].strip()})
                if len(row) >= 2 and row[1].strip():
                    messages.append({"role": "assistant", "content": row[1].strip()})
    else:
        logger.info(f"–§–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞ {client_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return messages

@app.route('/register-client', methods=['POST'])
def register_client():
    try:
        data = request.json
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞: {data}")
        result = register_or_update_client(data)
        if result.get("isNewClient", True):
            send_telegram_notification(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result['name']}, {result['email']}, {result['phone']}, –ö–æ–¥: {result['uniqueCode']}")
        else:
            send_telegram_notification(f"üîô –í–µ—Ä–Ω—É–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result['name']}, {result['email']}, {result['phone']}, –ö–æ–¥: {result['uniqueCode']}")
        return jsonify(result), 200
    except Exception as e:
        logger.error(f"‚ùå /register-client –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': str(e)}), 400

@app.route('/verify-code', methods=['POST'])
def verify_code():
    try:
        data = request.json
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞: {data}")
        code = data.get('code', '')
        client_data = verify_client_code(code)
        if client_data:
            send_telegram_notification(f"üîô –í–µ—Ä–Ω—É–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {client_data['Name']}, {client_data['Email']}, {client_data['Phone']}, –ö–æ–¥: {code}")
            return jsonify({'status': 'success', 'clientData': client_data}), 200
        return jsonify({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'}), 404
    except Exception as e:
        logger.error(f"‚ùå /verify-code –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': str(e)}), 400

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç: {data}")
        user_message = data.get("message", "")
        client_code = data.get("client_code", "")
        if not user_message or not client_code:
            logger.error("–û—à–∏–±–∫–∞: –ü—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞")
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'}), 400

        update_last_visit(client_code)
        update_activity_status()
        
        if client_code in pending_guiding:
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ —Ä–µ–∂–∏–º–µ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            pending = pending_guiding[client_code]
            pending.setdefault("answers", []).append(user_message)
            pending["current_index"] += 1
            if pending["current_index"] < len(pending["conditions"]):
                response_message = pending["conditions"][pending["current_index"]]
            else:
                final_price = get_price_response(pending["vehicle_type"], direction="Ro_Ge")
                response_message = f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. {final_price}"
                del pending_guiding[client_code]
        elif is_price_query(user_message):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ü–µ–Ω–µ
            vehicle_type = get_vehicle_type(user_message)
            if not vehicle_type:
                response_message = "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥—Ä—É–∑–æ–≤–∏–∫)."
            else:
                response_message = get_price_response(vehicle_type, direction="Ro_Ge")
        else:
            # –û–±—ã—á–Ω—ã–π —á–∞—Ç
            messages = prepare_chat_context(client_code)
            messages.append({"role": "user", "content": user_message})
            openai_response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=150
            )
            response_message = openai_response['choices'][0]['message']['content'].strip()
        
        add_message_to_client_file(client_code, user_message, is_assistant=False)
        add_message_to_client_file(client_code, response_message, is_assistant=True)
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç –ê–°–°: {response_message}")
        return jsonify({'reply': response_message}), 200
    except Exception as e:
        logger.error(f"‚ùå /chat –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': str(e)}), 500

###############################################
# –≠–ù–î–ü–û–ò–ù–¢ /get-price
###############################################
@app.route('/get-price', methods=['POST'], strict_slashes=False)
@app.route('/get-price/', methods=['POST'], strict_slashes=False)
def get_price_endpoint():
    try:
        data = request.json
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ /get-price: {data}")
        vehicle_description = data.get("vehicle_description", "")
        direction = data.get("direction", "Ro_Ge")
        vehicle_type = get_vehicle_type(vehicle_description)
        if not vehicle_type:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞."}), 400
        price_response = get_price_response(vehicle_type, direction)
        return jsonify({"price": price_response}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /get-price: {e}")
        return jsonify({"error": str(e)}), 500

###############################################
# Telegram Bot /webhook
###############################################
from telegram.ext import ConversationHandler

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    exit(1)

BIBLE_ASK_ACTION, BIBLE_ASK_QUESTION, BIBLE_ASK_ANSWER = range(3)

async def bible_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 'add' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç, –∏–ª–∏ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    return BIBLE_ASK_ACTION

async def ask_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    action = update.message.text.strip().lower()
    if action == "add":
        context.user_data['action'] = 'add'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
        return BIBLE_ASK_QUESTION
    elif action == "cancel":
        return await cancel_bible(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ 'add' –∏–ª–∏ 'cancel'.")
        return BIBLE_ASK_ACTION

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text.strip()
    context.user_data['question'] = question
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
    return BIBLE_ASK_ANSWER

async def ask_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text.strip()
    question = context.user_data.get('question')
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É: –í–æ–ø—Ä–æ—Å: {question} | –û—Ç–≤–µ—Ç: {answer}")
    try:
        save_bible_pair(question, answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã –≤ Bible.xlsx: {e}")
    await update.message.reply_text("–ü–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: 'Check'.")
    return ConversationHandler.END

async def cancel_bible(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

bible_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("bible", bible_start)],
    states={
        BIBLE_ASK_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_action)],
        BIBLE_ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)],
        BIBLE_ASK_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_answer)]
    },
    fallbacks=[CommandHandler("cancel", cancel_bible)]
)

application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
bot = application.bot
application.add_handler(bible_conv_handler)

@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, bot)
        global_loop.run_until_complete(application.process_update(update))
        return 'OK', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram update: {e}")
        return jsonify({'error': str(e)}), 500

##############################################
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞
##############################################
if __name__ == '__main__':
    print("–ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    print(app.url_map)
    port = int(os.environ.get('PORT', 8080))
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    if not WEBHOOK_URL:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)
    global_loop = asyncio.new_event_loop()
    asyncio.set_event_loop(global_loop)
    global_loop.run_until_complete(application.initialize())
    global_loop.run_until_complete(bot.set_webhook(WEBHOOK_URL))
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
