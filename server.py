import os
import re
import logging
import asyncio
import pprint
import time
from flask import Flask, request, jsonify
import openai
import requests
from datetime import datetime
from clientdata import register_or_update_client, verify_client_code, update_last_visit, update_activity_status
from client_caec import add_message_to_client_file, find_client_file_id, get_sheets_service, CLIENT_FILES_DIR
from bible import load_bible_data, save_bible_pair
from price_handler import check_ferry_price, load_price_data
from flask_cors import CORS
import openpyxl

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Telegram Bot (python-telegram-bot v20+)
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É service_account_json
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/etc/secrets/service_account_json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ CORS
app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("server.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)
logger.info("–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
pprint.pprint(dict(os.environ))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ guiding questions
pending_guiding = {}

###############################################
# –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ß–ï–†–ï–ó TELEGRAM
###############################################
def send_telegram_notification(message):
    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    telegram_chat_id = os.getenv("TELEGRAM_CHAT_ID")
    if not telegram_bot_token or not telegram_chat_id:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return
    url = f"https://api.telegram.org/bot{telegram_bot_token}/sendMessage"
    payload = {"chat_id": telegram_chat_id, "text": message, "parse_mode": "HTML"}
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.json()}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

###############################################
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–û–í –û –¶–ï–ù–ï
###############################################
PRICE_KEYWORDS = ["—Ü–µ–Ω–∞", "–ø—Ä–∞–π—Å", "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç", "–≤–æ —Å–∫–æ–ª—å–∫–æ –æ–±–æ–π–¥–µ—Ç—Å—è"]

def is_price_query(text):
    return any(keyword in text.lower() for keyword in PRICE_KEYWORDS)

def get_vehicle_type(text):
    known_types = {"truck": "Truck", "–≥—Ä—É–∑–æ–≤–∏–∫": "Truck", "fura": "Fura", "—Ñ—É—Ä–∞": "Fura"}
    for key, standard in known_types.items():
        if key in text.lower():
            return standard
    return None

def get_price_response(vehicle_type, direction="Ro_Ge"):
    attempt = 0
    while attempt < 3:
        try:
            response = check_ferry_price(vehicle_type, direction)
            if response.strip().upper() == "PRICE_QUERY":
                return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            return response
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {vehicle_type}: {e}")
            attempt += 1
            time.sleep(2)
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_guiding_question(condition_marker):
    """
    –ò—â–µ—Ç –≤ Bible.xlsx —Å—Ç—Ä–æ–∫—É, –≥–¥–µ Verification —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç condition_marker (–Ω–∞–ø—Ä–∏–º–µ—Ä, "CONDITION1")
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç guiding question –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ FAQ. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
    """
    bible_df = load_bible_data()
    if bible_df is None:
        return None
    for index, row in bible_df.iterrows():
        ver = str(row.get("Verification", "")).strip().upper()
        if ver == condition_marker.upper():
            question = row.get("FAQ", "").strip()
            return question
    return None

###############################################
# –§–£–ù–ö–¶–ò–Ø –ü–û–î–ì–û–¢–û–í–ö–ò –ö–û–ù–¢–ï–ö–°–¢–ê (–ü–ê–ú–Ø–¢–¨ –ê–°–°–ò–°–¢–ï–ù–¢–ê)
###############################################
def prepare_chat_context(client_code):
    messages = []
    bible_df = load_bible_data()
    if bible_df is None:
        raise Exception("Bible.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    logger.info(f"Bible.xlsx —Å–æ–¥–µ—Ä–∂–∏—Ç {len(bible_df)} –∑–∞–ø–∏—Å–µ–π.")
    bible_context = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ (FAQ):\n"
    for index, row in bible_df.iterrows():
        faq = row.get("FAQ", "")
        answer = row.get("Answers", "")
        verification = str(row.get("Verification", "")).strip().upper()
        if faq and answer and verification != "CHECK":
            bible_context += f"–í–æ–ø—Ä–æ—Å: {faq}\n–û—Ç–≤–µ—Ç: {answer}\n\n"
    system_message = {
        "role": "system",
        "content": f"–í—ã ‚Äì —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ CAEC. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:\n{bible_context}"
    }
    messages.append(system_message)
    
    spreadsheet_id = find_client_file_id(client_code)
    if spreadsheet_id:
        sheets_service = get_sheets_service()
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range="Sheet1!A:B"
        ).execute()
        values = result.get("values", [])
        if len(values) >= 2:
            conversation_rows = values[2:]
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(conversation_rows)} —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_code}.")
            for row in conversation_rows:
                if len(row) >= 1 and row[0].strip():
                    messages.append({"role": "user", "content": row[0].strip()})
                if len(row) >= 2 and row[1].strip():
                    messages.append({"role": "assistant", "content": row[1].strip()})
    else:
        logger.info(f"–§–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–æ–¥–æ–º {client_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return messages

###############################################
# –≠–ù–î–ü–û–ò–ù–¢–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò, –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –ò –ß–ê–¢–ê
###############################################
@app.route('/register-client', methods=['POST'])
def register_client():
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞: {data}")
        result = register_or_update_client(data)
        if result.get("isNewClient", True):
            send_telegram_notification(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {result['name']}, {result['email']}, {result['phone']}, –ö–æ–¥: {result['uniqueCode']}")
        else:
            send_telegram_notification(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è: {result['name']}, {result['email']}, {result['phone']}, –ö–æ–¥: {result['uniqueCode']}")
        return jsonify(result), 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /register-client: {e}")
        return jsonify({'error': str(e)}), 400

@app.route('/verify-code', methods=['POST'])
def verify_code():
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞: {data}")
        code = data.get('code', '')
        client_data = verify_client_code(code)
        if client_data:
            send_telegram_notification(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è: {client_data['Name']}, {client_data['Email']}, {client_data['Phone']}, –ö–æ–¥: {code}")
            return jsonify({'status': 'success', 'clientData': client_data}), 200
        return jsonify({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'}), 404
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /verify-code: {e}")
        return jsonify({'error': str(e)}), 400

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç: {data}")
        user_message = data.get("message", "")
        client_code = data.get("client_code", "")
        if not user_message or not client_code:
            logger.error("–û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'}), 400

        update_last_visit(client_code)
        update_activity_status()
        
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è guiding questions
        if client_code in pending_guiding:
            pending = pending_guiding[client_code]
            pending.setdefault("answers", []).append(user_message)
            pending["current_index"] += 1
            if pending["current_index"] < len(pending["guiding_questions"]):
                response_message = pending["guiding_questions"][pending["current_index"]]
            else:
                final_price_str = get_price_response(pending["vehicle_type"], direction="Ro_Ge")
                try:
                    base_price = float(final_price_str)
                    multiplier = 1.0
                    for ans in pending["answers"]:
                        if "adr" in ans.lower():
                            multiplier = 1.2
                            break
                    final_cost = base_price * multiplier
                    final_price = f"–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {base_price}. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {final_cost}."
                except Exception as ex:
                    final_price = f"–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: {final_price_str}. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: {', '.join(pending['answers'])}."
                response_message = f"–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. {final_price}"
                del pending_guiding[client_code]
        elif is_price_query(user_message):
            vehicle_type = get_vehicle_type(user_message)
            if not vehicle_type and client_code in pending_guiding:
                vehicle_type = pending_guiding[client_code]["vehicle_type"]
            if not vehicle_type:
                response_message = ("–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ "
                                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥—Ä—É–∑–æ–≤–∏–∫ –∏–ª–∏ —Ñ—É—Ä–∞).")
            else:
                price_data = load_price_data()
                if vehicle_type not in price_data:
                    response_message = f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è '{vehicle_type}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ."
                else:
                    conditions = price_data[vehicle_type].get("conditions", [])
                    active_markers = []
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ load_price_data() —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["Condition1", "Condition3"])
                    for marker in conditions:
                        active_markers.append(marker)
                    if active_markers:
                        guiding_questions = []
                        for marker in active_markers:
                            question = get_guiding_question(marker)
                            if question:
                                guiding_questions.append(question)
                        if guiding_questions:
                            pending_guiding[client_code] = {
                                "vehicle_type": vehicle_type,
                                "guiding_questions": guiding_questions,
                                "current_index": 0,
                                "answers": []
                            }
                            response_message = guiding_questions[0]
                        else:
                            response_message = get_price_response(vehicle_type, direction="Ro_Ge")
                    else:
                        response_message = get_price_response(vehicle_type, direction="Ro_Ge")
        else:
            messages = prepare_chat_context(client_code)
            messages.append({"role": "user", "content": user_message})
            attempt = 0
            while attempt < 3:
                try:
                    openai_response = openai.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=messages,
                        max_tokens=150,
                        timeout=20
                    )
                    break
                except Exception as e:
                    logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1} –æ—à–∏–±–∫–∏ –≤ OpenAI: {e}")
                    attempt += 1
                    time.sleep(2)
            response_message = openai_response['choices'][0]['message']['content'].strip()
        
        add_message_to_client_file(client_code, user_message, is_assistant=False)
        add_message_to_client_file(client_code, response_message, is_assistant=True)
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI/price_handler: {response_message}")
        return jsonify({'reply': response_message}), 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /chat: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/', methods=['GET'])
def home():
    return jsonify({"status": "Server is running!"}), 200

##############################################
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram Bot –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bible
##############################################
from telegram.ext import ConversationHandler

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    exit(1)

BIBLE_ASK_ACTION, BIBLE_ASK_QUESTION, BIBLE_ASK_ANSWER = range(3)

async def bible_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 'add' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç, –∏–ª–∏ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    return BIBLE_ASK_ACTION

async def ask_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    action = update.message.text.strip().lower()
    if action == "add":
        context.user_data['action'] = 'add'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
        return BIBLE_ASK_QUESTION
    elif action == "cancel":
        return await cancel_bible(update, context)
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ 'add' –∏–ª–∏ 'cancel'.")
        return BIBLE_ASK_ACTION

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text.strip()
    context.user_data['question'] = question
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
    return BIBLE_ASK_ANSWER

async def ask_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text.strip()
    question = context.user_data.get('question')
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É: –í–æ–ø—Ä–æ—Å: {question} | –û—Ç–≤–µ—Ç: {answer}")
    try:
        save_bible_pair(question, answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã –≤ Bible.xlsx: {e}")
    await update.message.reply_text("–ü–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π 'Check'.")
    return ConversationHandler.END

async def cancel_bible(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

bible_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("bible", bible_start)],
    states={
        BIBLE_ASK_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_action)],
        BIBLE_ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)],
        BIBLE_ASK_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_answer)],
    },
    fallbacks=[CommandHandler("cancel", cancel_bible)]
)

application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
bot = application.bot
application.add_handler(bible_conv_handler)

@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json(force=True)
        update = Update.de_json(data, bot)
        global_loop.run_until_complete(application.process_update(update))
        return 'OK', 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram update: {e}")
        return jsonify({'error': str(e)}), 500

##############################################
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞
##############################################
global_loop = asyncio.new_event_loop()
asyncio.set_event_loop(global_loop)
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    if not WEBHOOK_URL:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)
    global_loop.run_until_complete(application.initialize())
    global_loop.run_until_complete(bot.set_webhook(WEBHOOK_URL))
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
