from flask import Flask, request, jsonify
from flask_cors import CORS
import random
import string
import os
import openai
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–∫–ª—é—á–∞ OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# Telegram Bot Token
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
CORS(app)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
clients = {}

def generate_unique_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
    random_digits = ''.join(random.choices(string.digits, k=7))
    return f"CAEC{random_digits}"

def send_message_to_telegram(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": message
        }
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

@app.route('/register-client', methods=['POST'])
def register_client():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É."""
    try:
        data = request.json
        email = data['email']
        phone = data['phone']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        for code, client_data in clients.items():
            if client_data['email'] == email or client_data['phone'] == phone:
                return jsonify({
                    'uniqueCode': code,
                    'message': f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {client_data["name"]}! –í–∞—à –∫–æ–¥: {code}.\n–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ: https://t.me/<–≤–∞—à_–±–æ—Ç_username>'
                }), 200

        unique_code = generate_unique_code()
        clients[unique_code] = {
            'name': data['name'],
            'phone': phone,
            'email': email
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ Telegram
        send_message_to_telegram(
            chat_id="8074527842",
            message=(
                f"üì¢ –ù–æ–≤—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
                f"–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nEmail: {email}\n–ö–æ–¥: {unique_code}\n"
                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞—à–µ–º—É –±–æ—Ç—É: https://t.me/<–≤–∞—à_–±–æ—Ç_username>"
            )
        )

        return jsonify({
            'uniqueCode': unique_code,
            'message': f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {data["name"]}! –í–∞—à –∫–æ–¥: {unique_code}.\n–î–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ: https://t.me/<–≤–∞—à_–±–æ—Ç_username>'
        }), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 400

@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –æ—Ç Telegram."""
    try:
        data = request.json
        message = data.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        text = message.get('text')

        if not chat_id or not text:
            return jsonify({'status': 'ignored'}), 200

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥
        if chat_id not in clients:
            send_message_to_telegram(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
            return jsonify({'status': 'ok'}), 200

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        if text.startswith("CAEC"):
            if text in clients:
                send_message_to_telegram(chat_id, f"–°–ø–∞—Å–∏–±–æ! –ú—ã –≤–∞—Å —É–∑–Ω–∞–ª–∏: {clients[text]['name']}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            else:
                send_message_to_telegram(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return jsonify({'status': 'ok'}), 200

        # –û–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"},
                {"role": "user", "content": text}
            ],
            max_tokens=150
        )
        reply = response['choices'][0]['message']['content'].strip()
        send_message_to_telegram(chat_id, reply)
        return jsonify({'status': 'ok'}), 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
