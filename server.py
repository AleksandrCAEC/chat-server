# server.py
import os
import logging
import asyncio
from flask import Flask, request, jsonify
import openai
import requests
from datetime import datetime
from clientdata import register_or_update_client, verify_client_code, update_last_visit, update_activity_status
from client_caec import add_message_to_client_file
from bible import load_bible_data

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è Telegram Bot (python-telegram-bot v20+)
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É service_account_json
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "/etc/secrets/service_account_json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à —Ç–µ–∫—É—â–∏–π CORS –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
from flask_cors import CORS
CORS(app)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("server.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

##############################
# Telegram Bot Setup (async)
##############################

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
bot = application.bot  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Bot

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler –∫–æ–º–∞–Ω–¥—ã /bible
ASK_ACTION, ASK_QUESTION, ASK_ANSWER = range(3)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bible

async def bible_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ 'add' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç, –∏–ª–∏ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
    return ASK_ACTION

async def ask_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    action = update.message.text.strip().lower()
    if action == "add":
        context.user_data['action'] = 'add'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
        return ASK_QUESTION
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ 'add' –∏–ª–∏ 'cancel'.")
        return ASK_ACTION

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text.strip()
    context.user_data['question'] = question
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
    return ASK_ANSWER

async def ask_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text.strip()
    question = context.user_data.get('question')
    logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É: –í–æ–ø—Ä–æ—Å: {question} | –û—Ç–≤–µ—Ç: {answer}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, save_bible_pair(question, answer))
    await update.message.reply_text("–ü–∞—Ä–∞ –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –æ—Ç–º–µ—Ç–∫–æ–π 'Check'.")
    return ConversationHandler.END

async def cancel_bible(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /bible
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("bible", bible_start)],
    states={
        ASK_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_action)],
        ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question)],
        ASK_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_answer)],
    },
    fallbacks=[CommandHandler("cancel", cancel_bible)]
)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
application.add_handler(conv_handler)

#####################################
# –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
#####################################

@app.route('/register-client', methods=['POST'])
def register_client():
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞: {data}")
        result = register_or_update_client(data)
        if result.get("isNewClient", True):
            send_telegram_notification(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {result['name']}, {result['email']}, {result['phone']}, –ö–æ–¥: {result['uniqueCode']}")
        else:
            send_telegram_notification(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è: {result['name']}, {result['email']}, {result['phone']}, –ö–æ–¥: {result['uniqueCode']}")
        return jsonify(result), 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /register-client: {e}")
        return jsonify({'error': str(e)}), 400

@app.route('/verify-code', methods=['POST'])
def verify_code():
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–æ–¥–∞: {data}")
        code = data.get('code', '')
        client_data = verify_client_code(code)
        if client_data:
            send_telegram_notification(f"üîô –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è: {client_data['Name']}, {client_data['Email']}, {client_data['Phone']}, –ö–æ–¥: {code}")
            return jsonify({'status': 'success', 'clientData': client_data}), 200
        return jsonify({'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥'}), 404
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /verify-code: {e}")
        return jsonify({'error': str(e)}), 400

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç: {data}")
        user_message = data.get('message', '')
        client_code = data.get('client_code', '')
        if not user_message or not client_code:
            logger.error("–û—à–∏–±–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏'}), 400
        update_last_visit(client_code)
        update_activity_status()
        try:
            messages = prepare_chat_context(client_code)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}"
            logger.error(error_msg)
            send_telegram_notification(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {error_msg}")
            return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500
        messages.append({"role": "user", "content": user_message})
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=150
        )
        reply = response['choices'][0]['message']['content'].strip()
        add_message_to_client_file(client_code, user_message, is_assistant=False)
        add_message_to_client_file(client_code, reply, is_assistant=True)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenAI: {reply}")
        return jsonify({'reply': reply}), 200
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /chat: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/', methods=['GET'])
def home():
    return jsonify({"status": "Server is running!"}), 200

##############################
# –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Telegram Webhook
##############################

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram-–±–æ—Ç–∞ (POST)
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, bot)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    asyncio.run(application.process_update(update))
    return 'OK', 200

# –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤–µ–±—Ö—É–∫–∞ (GET)
@app.route('/webhook_test', methods=['GET'])
def telegram_webhook_test():
    return "Webhook endpoint is active", 200

####################################
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
####################################
def send_telegram_notification(message):
    telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    telegram_chat_id = os.getenv("TELEGRAM_CHAT_ID")
    if not telegram_bot_token or not telegram_chat_id:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        return
    url = f"https://api.telegram.org/bot{telegram_bot_token}/sendMessage"
    payload = {"chat_id": telegram_chat_id, "text": message, "parse_mode": "HTML"}
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.json()}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

####################################
# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞
####################################
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    if not WEBHOOK_URL:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        exit(1)
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    asyncio.run(bot.set_webhook(WEBHOOK_URL))
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True)
