import os
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import pandas as pd
from datetime import datetime

# –ü—É—Ç—å –∫ –ø–æ–¥–ø–∞–ø–∫–µ BIG_DATA
BIG_DATA_PATH = "./data/BIG_DATA"
os.makedirs(BIG_DATA_PATH, exist_ok=True)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É ClientData.xlsx
CLIENT_DATA_FILE = os.path.join(BIG_DATA_PATH, "ClientData.xlsx")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClientData.xlsx, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def initialize_client_data():
    if not os.path.exists(CLIENT_DATA_FILE):
        columns = ["Client Code", "Name", "Phone", "Email", "Created Date", "Last Visit", "Activity Status"]
        df = pd.DataFrame(columns=columns)
        df.to_excel(CLIENT_DATA_FILE, index=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ ClientData.xlsx
def load_client_data():
    try:
        return pd.read_excel(CLIENT_DATA_FILE)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        initialize_client_data()
        return pd.DataFrame(columns=["Client Code", "Name", "Phone", "Email", "Created Date", "Last Visit", "Activity Status"])

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ Google Sheets –∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
def save_client_data(client_code, name, phone, email, created_date, last_visit):
    try:
        credentials = Credentials.from_service_account_file(os.getenv("GOOGLE_APPLICATION_CREDENTIALS"))
        sheets_service = build('sheets', 'v4', credentials=credentials)

        spreadsheet_id = "1M-mRD32sQtkvTRcik7jq1n8ZshXhEearsaIBcFlheZk"
        range_name = "Sheet1!A2:G1000"

        values = [[client_code, name, phone, email, created_date, last_visit, "Active"]]
        body = {'values': values}

        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets: {values}")

        response = sheets_service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range=range_name,
            valueInputOption="RAW",
            body=body
        ).execute()

        print(f"–û—Ç–≤–µ—Ç –æ—Ç Google API: {response}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

    df = load_client_data()
    existing_client = df[df["Client Code"] == client_code]

    if existing_client.empty:
        new_data = pd.DataFrame([{
            "Client Code": client_code,
            "Name": name,
            "Phone": phone,
            "Email": email,
            "Created Date": created_date,
            "Last Visit": last_visit,
            "Activity Status": "Active"
        }])
        df = pd.concat([df, new_data], ignore_index=True)
    else:
        df.loc[df["Client Code"] == client_code, "Last Visit"] = last_visit

    df.to_excel(CLIENT_DATA_FILE, index=False)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞
def generate_unique_code():
    existing_codes = set(load_client_data()["Client Code"])
    while True:
        code = f"CAEC{str(datetime.now().timestamp()).replace('.', '')[-7:]}"
        if code not in existing_codes:
            return code

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
def register_or_update_client(data):
    initialize_client_data()
    df = load_client_data()

    email = data.get("email")
    phone = data.get("phone")
    name = data.get("name", "Unknown")
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    existing_client = df[(df["Email"] == email) | (df["Phone"] == phone)]

    if not existing_client.empty:
        client_code = existing_client.iloc[0]["Client Code"]
        created_date = existing_client.iloc[0]["Created Date"]  # –ë–µ—Ä–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        df.loc[df["Client Code"] == client_code, "Last Visit"] = current_date
        save_client_data(client_code, name, phone, email, created_date, current_date)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        return {
            "uniqueCode": client_code,
            "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {name}! –í–∞—à –∫–æ–¥: {client_code}.",
        }

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    client_code = generate_unique_code()
    created_date = current_date  # –î–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ = —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    save_client_data(client_code, name, phone, email, created_date, current_date)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞
    create_client_file(client_code, created_date, current_date)

    return {
        "uniqueCode": client_code,
        "message": f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –í–∞—à –∫–æ–¥: {client_code}.",
    }

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞
def create_client_file(client_code, created_date, last_visit):
    client_file_path = os.path.join(BIG_DATA_PATH, f"{client_code}.xlsx")

    if not os.path.exists(client_file_path):
        columns = ["Date", "Message", "Created Date", "Last Visit"]
        df = pd.DataFrame(columns=columns)

        df = df.append({
            "Date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Message": "–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
            "Created Date": created_date,
            "Last Visit": last_visit
        }, ignore_index=True)

        df.to_excel(client_file_path, index=False)
        print(f"üìÅ –§–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω: {client_file_path}")
    else:
        df = pd.read_excel(client_file_path)
        df.loc[df.index[-1], "Last Visit"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        df.to_excel(client_file_path, index=False)
        print(f"‚úÖ –§–∞–π–ª –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {client_file_path}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
initialize_client_data()
